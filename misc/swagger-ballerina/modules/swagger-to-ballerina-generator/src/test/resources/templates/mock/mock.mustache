{{#apiPackage}}package {{apiPackage}};

{{/apiPackage}}import ballerina/http;
import ballerina/http.swagger;

{{#servers}}endpoint http:ServiceEndpoint ep{{@index}} {
    host: "{{host}}",
    port: {{port}}
};
{{/servers}}
@swagger:ServiceInfo { {{#info}}
    title: "{{title}}",
    serviceVersion: "{{version}}",
    termsOfService: "{{termsOfService}}",
    contact: {name: "{{contact.name}}", email: "{{contact.email}}", url: "{{contact.url}}"},
    license: {name: "{{license.name}}", url: "{{license.url}}"},{{/info}}
    tags: [{{#tags}}
        {name: "{{name}}", description: "{{description}}", externalDocs: {{>doc}} }{{#unless @last}},{{/unless}}{{/tags}}
    ],
    security: [{{#security}}
        {{>security}}{{/security}}
    ]
}
@http:ServiceConfig {
    basePath: "{{servers.0.basePath}}"{{!-- {{only one base path is allowed for all endpoints}} --}}
}
documentation { {{#info.description}}
{{info.description}}{{/info.description}}{{#externalDocs}}

url: {{externalDocs.url}}
description: {{externalDocs.description}}{{/externalDocs}}
}
service<http:Service> {{cut info.title " "}} bind {{#servers}}ep{{@index}}{{#unless @last}}, {{/unless}}{{/servers}} {
{{#paths}}{{#value}}{{#get}}
    @swagger:ResourceInfo {
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}],
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]
    }
    @http:ResourceConfig {
        methods:["GET"],
        path:"{{key}}"
    }
    documentation { {{#summary}}
    summary: {{summary}}{{/summary}}{{#description}}
    description: {{description}}{{/description}}{{#externalDocs}}

    url: {{externalDocs.url}}
    description: {{externalDocs.description}}
    {{/externalDocs}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request req{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = outboundEp -> respond(resp);
    }
{{/get}}{{#post}}
    @swagger:ResourceInfo {
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}],
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]
    }
    @http:ResourceConfig {
        methods:["POST"],
        path:"{{key}}"
    }
    documentation { {{#summary}}
    summary: {{summary}}{{/summary}}{{#description}}
    description: {{description}}{{/description}}{{#externalDocs}}

    url: {{externalDocs.url}}
    description: {{externalDocs.description}}
    {{/externalDocs}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request req{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = outboundEp -> respond(resp);
    }
{{/post}}{{#put}}
    @swagger:ResourceInfo {
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}],
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]
    }
    @http:ResourceConfig {
        methods:["PUT"],
        path:"{{key}}"
    }
    documentation { {{#summary}}
    summary: {{summary}}{{/summary}}{{#description}}
    description: {{description}}{{/description}}{{#externalDocs}}

    url: {{externalDocs.url}}
    description: {{externalDocs.description}}
    {{/externalDocs}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request req{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = outboundEp -> respond(resp);
    }
{{/put}}{{#delete}}
    @swagger:ResourceInfo {
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}],
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]
    }
    @http:ResourceConfig {
        methods:["DELETE"],
        path:"{{key}}"
    }
    documentation { {{#summary}}
    summary: {{summary}}{{/summary}}{{#description}}
    description: {{description}}{{/description}}{{#externalDocs}}

    url: {{externalDocs.url}}
    description: {{externalDocs.description}}
    {{/externalDocs}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request req{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = outboundEp -> respond(resp);
    }
{{/delete}}{{#options}}
    @swagger:ResourceInfo {
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}],
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]
    }
    @http:ResourceConfig {
        methods:["OPTIONS"],
        path:"{{key}}"
    }
    documentation { {{#summary}}
    summary: {{summary}}{{/summary}}{{#description}}
    description: {{description}}{{/description}}{{#externalDocs}}

    url: {{externalDocs.url}}
    description: {{externalDocs.description}}
    {{/externalDocs}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request req{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = outboundEp -> respond(resp);
    }
{{/options}}{{#head}}
    @swagger:ResourceInfo {
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}],
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]
    }
    @http:ResourceConfig {
        methods:["HEAD"],
        path:"{{key}}"
    }
    documentation { {{#summary}}
    summary: {{summary}}{{/summary}}{{#description}}
    description: {{description}}{{/description}}{{#externalDocs}}

    url: {{externalDocs.url}}
    description: {{externalDocs.description}}
    {{/externalDocs}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request req{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = outboundEp -> respond(resp);
    }
{{/head}}{{#patch}}
    @swagger:ResourceInfo {
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}],
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]
    }
    @http:ResourceConfig {
        methods:["PATCH"],
        path:"{{key}}"
    }
    documentation { {{#summary}}
    summary: {{summary}}{{/summary}}{{#description}}
    description: {{description}}{{/description}}{{#externalDocs}}

    url: {{externalDocs.url}}
    description: {{externalDocs.description}}
    {{/externalDocs}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request req{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = outboundEp -> respond(resp);
    }
{{/patch}}{{#trace}}
    @swagger:ResourceInfo {
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}],
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]
    }
    @http:ResourceConfig {
        methods:["TRACE"],
        path:"{{key}}"
    }
    documentation { {{#summary}}
    summary: {{summary}}{{/summary}}{{#description}}
    description: {{description}}{{/description}}{{#externalDocs}}

    url: {{externalDocs.url}}
    description: {{externalDocs.description}}
    {{/externalDocs}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request req{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = outboundEp -> respond(resp);
    }
{{/trace}}{{/value}}{{/paths}}
}
