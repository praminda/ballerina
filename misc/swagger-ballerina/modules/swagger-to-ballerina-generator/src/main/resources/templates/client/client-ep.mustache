import ballerina/io;
import ballerina/mime;
import ballerina/http;

//=====================================
//============Client Config============
//=====================================
public type {{cut info.title " "}}ClientConfig record {
    string serviceUrl,
    http:ClientEndpointConfig clientConfig,
};

//=======================================
//============Client Endpoint============
//=======================================
public type {{cut info.title " "}}ClientEp object {
    public http:Client client;
    public {{cut info.title " "}}ClientConfig config;

    public function init({{cut info.title " "}}ClientConfig initConf) {
        endpoint http:Client httpEp {
            url: initConf.serviceUrl,
            auth: initConf.clientConfig.auth,
            cache: initConf.clientConfig.cache
        };

        self.client = httpEp;
        self.config = initConf;
    }

    public function getCallerActions() returns ({{cut info.title " "}}Client) {
        return new {{cut info.title " "}}Client(self);
    }
};

//==============================
//============Client============
//==============================
public type {{cut info.title " "}}Client object {
    public {{cut info.title " "}}ClientEp clientEp;

    new (clientEp) {}
{{#paths}}{{#value}}{{#operations}}{{#value}}{{#equals key "multi"}}{{#if methods}}{{#methods}}
    public function {{lower .}}{{operationId}}({{#parameters}}{{>params}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        // TODO: Update the request as needed
        return check ep->{{lower .}}("{{../../../key}}", message = request);
    }
    {{/methods}}{{else}}{{#allMethods}}
    public function {{lower .}}{{operationId}}({{#parameters}}{{>params}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        // TODO: Update the request as needed
        return check ep->{{lower .}}("{{../../../key}}", message = request);
    }
    {{/allMethods}}{{/if}}{{else}}
    public function {{operationId}}({{#requestBody}}{{>reqBody}}{{/requestBody}}{{#parameters}}{{>params}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client _{{operationId}}Ep = self.clientEp.client;
        http:Request request = new;{{#requestBody}}{{#equals requestBody.selectedMedia.mediaType "application/json"}}
        json _{{operationId}}JsonBody = check <json> _{{operationId}}Body;
        request.setPayload(_{{operationId}}JsonBody);{{else}}
        request.setPayload(_{{operationId}}Body);{{/equals}}{{/requestBody}}

        // TODO: Update the request as needed
        return check _{{operationId}}Ep->{{key}}("{{../../key}}", {{#if requestBody}}request{{else}}message = request{{/if}});
    }
    {{/equals}}{{/value}}{{/operations}}{{/value}}{{/paths}}
};
